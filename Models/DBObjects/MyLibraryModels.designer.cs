#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyLibrary.Models.DBObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyLibrary")]
	public partial class MyLibraryModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertShelf(Shelf instance);
    partial void UpdateShelf(Shelf instance);
    partial void DeleteShelf(Shelf instance);
    partial void InsertBookshelf(Bookshelf instance);
    partial void UpdateBookshelf(Bookshelf instance);
    partial void DeleteBookshelf(Bookshelf instance);
    partial void InsertCoverImage(CoverImage instance);
    partial void UpdateCoverImage(CoverImage instance);
    partial void DeleteCoverImage(CoverImage instance);
    partial void InsertOwnership(Ownership instance);
    partial void UpdateOwnership(Ownership instance);
    partial void DeleteOwnership(Ownership instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertLibrary(Library instance);
    partial void UpdateLibrary(Library instance);
    partial void DeleteLibrary(Library instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    #endregion
		
		public MyLibraryModelsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MyLibraryConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyLibraryModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLibraryModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLibraryModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLibraryModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Shelf> Shelfs
		{
			get
			{
				return this.GetTable<Shelf>();
			}
		}
		
		public System.Data.Linq.Table<Bookshelf> Bookshelfs
		{
			get
			{
				return this.GetTable<Bookshelf>();
			}
		}
		
		public System.Data.Linq.Table<CoverImage> CoverImages
		{
			get
			{
				return this.GetTable<CoverImage>();
			}
		}
		
		public System.Data.Linq.Table<Ownership> Ownerships
		{
			get
			{
				return this.GetTable<Ownership>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Library> Libraries
		{
			get
			{
				return this.GetTable<Library>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shelfs")]
	public partial class Shelf : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ShelfId;
		
		private string _Description;
		
		private System.Guid _BookshelfId;
		
		private EntitySet<Ownership> _Ownerships;
		
		private EntityRef<Bookshelf> _Bookshelf;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShelfIdChanging(System.Guid value);
    partial void OnShelfIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBookshelfIdChanging(System.Guid value);
    partial void OnBookshelfIdChanged();
    #endregion
		
		public Shelf()
		{
			this._Ownerships = new EntitySet<Ownership>(new Action<Ownership>(this.attach_Ownerships), new Action<Ownership>(this.detach_Ownerships));
			this._Bookshelf = default(EntityRef<Bookshelf>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelfId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ShelfId
		{
			get
			{
				return this._ShelfId;
			}
			set
			{
				if ((this._ShelfId != value))
				{
					this.OnShelfIdChanging(value);
					this.SendPropertyChanging();
					this._ShelfId = value;
					this.SendPropertyChanged("ShelfId");
					this.OnShelfIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookshelfId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BookshelfId
		{
			get
			{
				return this._BookshelfId;
			}
			set
			{
				if ((this._BookshelfId != value))
				{
					if (this._Bookshelf.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookshelfIdChanging(value);
					this.SendPropertyChanging();
					this._BookshelfId = value;
					this.SendPropertyChanged("BookshelfId");
					this.OnBookshelfIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelf_Ownership", Storage="_Ownerships", ThisKey="ShelfId", OtherKey="ShelfId")]
		public EntitySet<Ownership> Ownerships
		{
			get
			{
				return this._Ownerships;
			}
			set
			{
				this._Ownerships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bookshelf_Shelf", Storage="_Bookshelf", ThisKey="BookshelfId", OtherKey="BookshelfId", IsForeignKey=true)]
		public Bookshelf Bookshelf
		{
			get
			{
				return this._Bookshelf.Entity;
			}
			set
			{
				Bookshelf previousValue = this._Bookshelf.Entity;
				if (((previousValue != value) 
							|| (this._Bookshelf.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bookshelf.Entity = null;
						previousValue.Shelfs.Remove(this);
					}
					this._Bookshelf.Entity = value;
					if ((value != null))
					{
						value.Shelfs.Add(this);
						this._BookshelfId = value.BookshelfId;
					}
					else
					{
						this._BookshelfId = default(System.Guid);
					}
					this.SendPropertyChanged("Bookshelf");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ownerships(Ownership entity)
		{
			this.SendPropertyChanging();
			entity.Shelf = this;
		}
		
		private void detach_Ownerships(Ownership entity)
		{
			this.SendPropertyChanging();
			entity.Shelf = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bookshelfs")]
	public partial class Bookshelf : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BookshelfId;
		
		private string _Description;
		
		private System.Guid _LibraryId;
		
		private EntitySet<Shelf> _Shelfs;
		
		private EntityRef<Library> _Library;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookshelfIdChanging(System.Guid value);
    partial void OnBookshelfIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLibraryIdChanging(System.Guid value);
    partial void OnLibraryIdChanged();
    #endregion
		
		public Bookshelf()
		{
			this._Shelfs = new EntitySet<Shelf>(new Action<Shelf>(this.attach_Shelfs), new Action<Shelf>(this.detach_Shelfs));
			this._Library = default(EntityRef<Library>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookshelfId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BookshelfId
		{
			get
			{
				return this._BookshelfId;
			}
			set
			{
				if ((this._BookshelfId != value))
				{
					this.OnBookshelfIdChanging(value);
					this.SendPropertyChanging();
					this._BookshelfId = value;
					this.SendPropertyChanged("BookshelfId");
					this.OnBookshelfIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibraryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LibraryId
		{
			get
			{
				return this._LibraryId;
			}
			set
			{
				if ((this._LibraryId != value))
				{
					if (this._Library.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLibraryIdChanging(value);
					this.SendPropertyChanging();
					this._LibraryId = value;
					this.SendPropertyChanged("LibraryId");
					this.OnLibraryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bookshelf_Shelf", Storage="_Shelfs", ThisKey="BookshelfId", OtherKey="BookshelfId")]
		public EntitySet<Shelf> Shelfs
		{
			get
			{
				return this._Shelfs;
			}
			set
			{
				this._Shelfs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Library_Bookshelf", Storage="_Library", ThisKey="LibraryId", OtherKey="LibraryId", IsForeignKey=true)]
		public Library Library
		{
			get
			{
				return this._Library.Entity;
			}
			set
			{
				Library previousValue = this._Library.Entity;
				if (((previousValue != value) 
							|| (this._Library.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Library.Entity = null;
						previousValue.Bookshelfs.Remove(this);
					}
					this._Library.Entity = value;
					if ((value != null))
					{
						value.Bookshelfs.Add(this);
						this._LibraryId = value.LibraryId;
					}
					else
					{
						this._LibraryId = default(System.Guid);
					}
					this.SendPropertyChanged("Library");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shelfs(Shelf entity)
		{
			this.SendPropertyChanging();
			entity.Bookshelf = this;
		}
		
		private void detach_Shelfs(Shelf entity)
		{
			this.SendPropertyChanging();
			entity.Bookshelf = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoverImages")]
	public partial class CoverImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CoverImageId;
		
		private string _ImageLocation;
		
		private bool _IsLocal;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoverImageIdChanging(System.Guid value);
    partial void OnCoverImageIdChanged();
    partial void OnImageLocationChanging(string value);
    partial void OnImageLocationChanged();
    partial void OnIsLocalChanging(bool value);
    partial void OnIsLocalChanged();
    #endregion
		
		public CoverImage()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoverImageId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CoverImageId
		{
			get
			{
				return this._CoverImageId;
			}
			set
			{
				if ((this._CoverImageId != value))
				{
					this.OnCoverImageIdChanging(value);
					this.SendPropertyChanging();
					this._CoverImageId = value;
					this.SendPropertyChanged("CoverImageId");
					this.OnCoverImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageLocation", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string ImageLocation
		{
			get
			{
				return this._ImageLocation;
			}
			set
			{
				if ((this._ImageLocation != value))
				{
					this.OnImageLocationChanging(value);
					this.SendPropertyChanging();
					this._ImageLocation = value;
					this.SendPropertyChanged("ImageLocation");
					this.OnImageLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocal", DbType="Bit NOT NULL")]
		public bool IsLocal
		{
			get
			{
				return this._IsLocal;
			}
			set
			{
				if ((this._IsLocal != value))
				{
					this.OnIsLocalChanging(value);
					this.SendPropertyChanging();
					this._IsLocal = value;
					this.SendPropertyChanged("IsLocal");
					this.OnIsLocalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoverImage_Book", Storage="_Books", ThisKey="CoverImageId", OtherKey="CoverImageId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.CoverImage = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.CoverImage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ownerships")]
	public partial class Ownership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OwnershipId;
		
		private System.Guid _BookId;
		
		private System.Guid _ShelfId;
		
		private bool _IsRead;
		
		private System.Nullable<int> _BookmarkedPage;
		
		private EntityRef<Shelf> _Shelf;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnershipIdChanging(System.Guid value);
    partial void OnOwnershipIdChanged();
    partial void OnBookIdChanging(System.Guid value);
    partial void OnBookIdChanged();
    partial void OnShelfIdChanging(System.Guid value);
    partial void OnShelfIdChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnBookmarkedPageChanging(System.Nullable<int> value);
    partial void OnBookmarkedPageChanged();
    #endregion
		
		public Ownership()
		{
			this._Shelf = default(EntityRef<Shelf>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnershipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OwnershipId
		{
			get
			{
				return this._OwnershipId;
			}
			set
			{
				if ((this._OwnershipId != value))
				{
					this.OnOwnershipIdChanging(value);
					this.SendPropertyChanging();
					this._OwnershipId = value;
					this.SendPropertyChanged("OwnershipId");
					this.OnOwnershipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelfId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ShelfId
		{
			get
			{
				return this._ShelfId;
			}
			set
			{
				if ((this._ShelfId != value))
				{
					if (this._Shelf.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShelfIdChanging(value);
					this.SendPropertyChanging();
					this._ShelfId = value;
					this.SendPropertyChanged("ShelfId");
					this.OnShelfIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookmarkedPage", DbType="Int")]
		public System.Nullable<int> BookmarkedPage
		{
			get
			{
				return this._BookmarkedPage;
			}
			set
			{
				if ((this._BookmarkedPage != value))
				{
					this.OnBookmarkedPageChanging(value);
					this.SendPropertyChanging();
					this._BookmarkedPage = value;
					this.SendPropertyChanged("BookmarkedPage");
					this.OnBookmarkedPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelf_Ownership", Storage="_Shelf", ThisKey="ShelfId", OtherKey="ShelfId", IsForeignKey=true)]
		public Shelf Shelf
		{
			get
			{
				return this._Shelf.Entity;
			}
			set
			{
				Shelf previousValue = this._Shelf.Entity;
				if (((previousValue != value) 
							|| (this._Shelf.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shelf.Entity = null;
						previousValue.Ownerships.Remove(this);
					}
					this._Shelf.Entity = value;
					if ((value != null))
					{
						value.Ownerships.Add(this);
						this._ShelfId = value.ShelfId;
					}
					else
					{
						this._ShelfId = default(System.Guid);
					}
					this.SendPropertyChanged("Shelf");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Ownership", Storage="_Book", ThisKey="BookId", OtherKey="BookId", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Ownerships.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Ownerships.Add(this);
						this._BookId = value.BookId;
					}
					else
					{
						this._BookId = default(System.Guid);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _Email;
		
		private string _Name;
		
		private EntitySet<Library> _Libraries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public User()
		{
			this._Libraries = new EntitySet<Library>(new Action<Library>(this.attach_Libraries), new Action<Library>(this.detach_Libraries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Library", Storage="_Libraries", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Library> Libraries
		{
			get
			{
				return this._Libraries;
			}
			set
			{
				this._Libraries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Libraries(Library entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Libraries(Library entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Libraries")]
	public partial class Library : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LibraryId;
		
		private string _Description;
		
		private System.Guid _UserId;
		
		private EntitySet<Bookshelf> _Bookshelfs;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLibraryIdChanging(System.Guid value);
    partial void OnLibraryIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public Library()
		{
			this._Bookshelfs = new EntitySet<Bookshelf>(new Action<Bookshelf>(this.attach_Bookshelfs), new Action<Bookshelf>(this.detach_Bookshelfs));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibraryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LibraryId
		{
			get
			{
				return this._LibraryId;
			}
			set
			{
				if ((this._LibraryId != value))
				{
					this.OnLibraryIdChanging(value);
					this.SendPropertyChanging();
					this._LibraryId = value;
					this.SendPropertyChanged("LibraryId");
					this.OnLibraryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Library_Bookshelf", Storage="_Bookshelfs", ThisKey="LibraryId", OtherKey="LibraryId")]
		public EntitySet<Bookshelf> Bookshelfs
		{
			get
			{
				return this._Bookshelfs;
			}
			set
			{
				this._Bookshelfs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Library", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Libraries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Libraries.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookshelfs(Bookshelf entity)
		{
			this.SendPropertyChanging();
			entity.Library = this;
		}
		
		private void detach_Bookshelfs(Bookshelf entity)
		{
			this.SendPropertyChanging();
			entity.Library = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BookId;
		
		private string _ISBN;
		
		private string _Title;
		
		private string _Author;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _CoverImageId;
		
		private System.Nullable<int> _YearPublished;
		
		private string _Publisher;
		
		private string _Genre;
		
		private EntitySet<Ownership> _Ownerships;
		
		private EntityRef<CoverImage> _CoverImage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIdChanging(System.Guid value);
    partial void OnBookIdChanged();
    partial void OnISBNChanging(string value);
    partial void OnISBNChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCoverImageIdChanging(System.Nullable<System.Guid> value);
    partial void OnCoverImageIdChanged();
    partial void OnYearPublishedChanging(System.Nullable<int> value);
    partial void OnYearPublishedChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnGenreChanging(string value);
    partial void OnGenreChanged();
    #endregion
		
		public Book()
		{
			this._Ownerships = new EntitySet<Ownership>(new Action<Ownership>(this.attach_Ownerships), new Action<Ownership>(this.detach_Ownerships));
			this._CoverImage = default(EntityRef<CoverImage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBN", DbType="VarChar(13)")]
		public string ISBN
		{
			get
			{
				return this._ISBN;
			}
			set
			{
				if ((this._ISBN != value))
				{
					this.OnISBNChanging(value);
					this.SendPropertyChanging();
					this._ISBN = value;
					this.SendPropertyChanged("ISBN");
					this.OnISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoverImageId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CoverImageId
		{
			get
			{
				return this._CoverImageId;
			}
			set
			{
				if ((this._CoverImageId != value))
				{
					if (this._CoverImage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoverImageIdChanging(value);
					this.SendPropertyChanging();
					this._CoverImageId = value;
					this.SendPropertyChanged("CoverImageId");
					this.OnCoverImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearPublished", DbType="Int")]
		public System.Nullable<int> YearPublished
		{
			get
			{
				return this._YearPublished;
			}
			set
			{
				if ((this._YearPublished != value))
				{
					this.OnYearPublishedChanging(value);
					this.SendPropertyChanging();
					this._YearPublished = value;
					this.SendPropertyChanged("YearPublished");
					this.OnYearPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="VarChar(200)")]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre", DbType="VarChar(200)")]
		public string Genre
		{
			get
			{
				return this._Genre;
			}
			set
			{
				if ((this._Genre != value))
				{
					this.OnGenreChanging(value);
					this.SendPropertyChanging();
					this._Genre = value;
					this.SendPropertyChanged("Genre");
					this.OnGenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Ownership", Storage="_Ownerships", ThisKey="BookId", OtherKey="BookId")]
		public EntitySet<Ownership> Ownerships
		{
			get
			{
				return this._Ownerships;
			}
			set
			{
				this._Ownerships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoverImage_Book", Storage="_CoverImage", ThisKey="CoverImageId", OtherKey="CoverImageId", IsForeignKey=true)]
		public CoverImage CoverImage
		{
			get
			{
				return this._CoverImage.Entity;
			}
			set
			{
				CoverImage previousValue = this._CoverImage.Entity;
				if (((previousValue != value) 
							|| (this._CoverImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoverImage.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._CoverImage.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._CoverImageId = value.CoverImageId;
					}
					else
					{
						this._CoverImageId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CoverImage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ownerships(Ownership entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Ownerships(Ownership entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
}
#pragma warning restore 1591
